<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content=".NET .NET Core EF Core Sharding" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>EFCore.Sharding(EFCore开源分表框架) - 寒空飞箭 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/summergarden/bundle-summergarden.min.css?v=VU1dFS4587gn2X8grE6LlrhwScli3SW5N_Dod2a5NAU" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/summergarden/bundle-summergarden-mobile.min.css?v=qqfeWJjwG2yHc4G3o4D_aAh8NdA2Uspy5vjuqwOEq0c" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/coldairarrow/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/coldairarrow/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/coldairarrow/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=uk-as-QYRHtjaAbeEigAktvhwf01NRrnle-6exg65Ak"></script>
    <script>
        var currentBlogId = 345024;
        var currentBlogApp = 'coldairarrow';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'summerGarden';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/coldairarrow/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/coldairarrow/">寒空飞箭</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		

			<ul id="navList">
				<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
				<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/coldairarrow/">
首页</a>
</li>
				<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
				<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%AF%92%E7%A9%BA%E9%A3%9E%E7%AE%AD">
联系</a></li>
				<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
				<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/coldairarrow/rss/">
订阅</a>
				
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/coldairarrow/rss/">
    <img src="/skins/summergarden/images/xml.gif" alt="订阅" />
</a></li>
			</ul>



		<div class="blogStats">
			
			<!--done-->
随笔 - 
14&nbsp;
文章 - 
0&nbsp;
评论 - 
424&nbsp;



			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/coldairarrow/p/12733886.html">EFCore.Sharding(EFCore开源分表框架)</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
    <div id="cnblogs_post_description" style="display: none">
        .NET .NET Core EF Core Sharding
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <center> <font  size=5 >EFCore.Sharding(EFCore开源分表框架)</font></center>
<ul>
<li><a href="#%e7%ae%80%e4%bb%8b">简介</a></li>
<li><a href="#%e5%bc%95%e8%a8%80">引言</a></li>
<li><a href="#%e5%bc%80%e5%a7%8b">开始</a>
<ul>
<li><a href="#%e5%87%86%e5%a4%87">准备</a></li>
<li><a href="#%e9%85%8d%e7%bd%ae">配置</a></li>
<li><a href="#%e4%bd%bf%e7%94%a8">使用</a></li>
<li><a href="#%e6%8c%89%e6%97%b6%e9%97%b4%e8%87%aa%e5%8a%a8%e5%88%86%e8%a1%a8">按时间自动分表</a></li>
<li><a href="#%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95">性能测试</a></li>
<li><a href="#%e5%85%b6%e5%ae%83%e7%ae%80%e5%8d%95%e6%93%8d%e4%bd%9c%e9%9d%9esharing">其它简单操作(非Sharing)</a></li>
</ul>
</li>
<li><a href="#%e6%80%bb%e7%bb%93">总结</a></li>
</ul>
<h1 id="简介">简介</h1>
<p>本框架旨在为EF Core提供<strong>Sharding</strong>(即读写分离分库分表)支持,不仅提供了一套强大的普通数据操作接口,并且降低了分表难度,支持按时间自动分表扩容,提供的操作接口简洁统一.</p>
<p>源码地址:<a href="https://github.com/Coldairarrow/EFCore.Sharding">EFCore.SHarding</a></p>
<h1 id="引言">引言</h1>
<p>读写分离分库分表一直是数据库领域中的重难点,当数据规模达到单库极限的时候,就不得不考虑分表方案。EF Core作为.NET Core中最为主流的ORM,用起来十分方便快捷,但是官方并没有相应的Sharding支持,鄙人不才,经过一番摸索之后终于完成这个框架.</p>
<h1 id="开始">开始</h1>
<h2 id="准备">准备</h2>
<p>首先根据需要安装对应的Nuget包</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>EFCore.Sharding</td>
<td>必装包,3.x版本对应EF Core3.x,2.x版本对应EF Core2.x</td>
</tr>
<tr>
<td>EFCore.Sharding.MySql</td>
<td>MySql支持</td>
</tr>
<tr>
<td>EFCore.Sharding.PostgreSql</td>
<td>PostgreSql支持</td>
</tr>
<tr>
<td>EFCore.Sharding.SQLite</td>
<td>SQLite支持</td>
</tr>
<tr>
<td>EFCore.Sharding.SqlServer</td>
<td>SqlServer支持</td>
</tr>
<tr>
<td>EFCore.Sharding.Oracle</td>
<td>Oracle支持(暂不支持3.x)</td>
</tr>
</tbody>
</table>
<h2 id="配置">配置</h2>
<pre><code class="language-c#">class Base_UnitTestShardingRule : ModShardingRule&lt;Base_UnitTest&gt;
{
    protected override string KeyField =&gt; &quot;Id&quot;;
    protected override int Mod =&gt; 3;
}

ShardingConfig.Init(config =&gt;
{
    config.AddAbsDb(DatabaseType.SQLite)
        .AddPhysicDb(ReadWriteType.Read | ReadWriteType.Write, &quot;DataSource=db.db&quot;)
        .AddPhysicDbGroup()
        .AddPhysicTable&lt;Base_UnitTest&gt;(&quot;Base_UnitTest_0&quot;)
        .AddPhysicTable&lt;Base_UnitTest&gt;(&quot;Base_UnitTest_1&quot;)
        .AddPhysicTable&lt;Base_UnitTest&gt;(&quot;Base_UnitTest_2&quot;)
        .SetShardingRule(new Base_UnitTestShardingRule());
});
</code></pre>
<p>上述代码中完成了Sharding配置</p>
<ul>
<li><strong>AddAbsDb</strong>是指添加抽象数据库,抽象数据库就是将多个分库看成同一个数据库来进行操作</li>
<li><strong>AddPhysicDbGroup</strong>是指添加物理数据库组,在同一组物理数据库中,它们数据库类型相同,拥有的表相同,每个数据库拥有的数据是一致的(之间通过主主复制或主从复制进行数据同步)</li>
<li><strong>AddPhysicTable</strong>是指添加物理数据表,传入的Base_UnitTest是抽象数据表(即将Base_UnitTest拆分为Base_UnitTest_0~2)</li>
<li><strong>Base_UnitTestShardingRule</strong>是采用的分表规则,上述代码中采用的是哈希取模的分表方式</li>
</ul>
<h2 id="使用">使用</h2>
<p>配置完成，下面开始使用，使用方式<strong>非常简单</strong>，与平常使用基本一致<br>
首先获取分片仓储接口IShardingRepository</p>
<pre><code class="language-c#">IShardingRepository _db = DbFactory.GetRepository().ToSharding();
</code></pre>
<p>然后即可进行数据操作：</p>
<pre><code class="language-c#">Base_UnitTest _newData  = new Base_UnitTest
{
    Id = Guid.NewGuid().ToString(),
    UserId = &quot;Admin&quot;,
    UserName = &quot;超级管理员&quot;,
    Age = 22
};
List&lt;Base_UnitTest&gt; _insertList = new List&lt;Base_UnitTest&gt;
{
    new Base_UnitTest
    {
        Id = Guid.NewGuid().ToString(),
        UserId = &quot;Admin1&quot;,
        UserName = &quot;超级管理员1&quot;,
        Age = 22
    },
    new Base_UnitTest
    {
        Id = Guid.NewGuid().ToString(),
        UserId = &quot;Admin2&quot;,
        UserName = &quot;超级管理员2&quot;,
        Age = 22
    }
};
//添加单条数据
_db.Insert(_newData);
//添加多条数据
_db.Insert(_insertList);
//清空表
_db.DeleteAll&lt;Base_UnitTest&gt;();
//删除单条数据
_db.Delete(_newData);
//删除多条数据
_db.Delete(_insertList);
//删除指定数据
_db.Delete&lt;Base_UnitTest&gt;(x =&gt; x.UserId == &quot;Admin2&quot;);
//更新单条数据
_db.Update(_newData);
//更新多条数据
_db.Update(_insertList);
//更新单条数据指定属性
_db.UpdateAny(_newData, new List&lt;string&gt; { &quot;UserName&quot;, &quot;Age&quot; });
//更新多条数据指定属性
_db.UpdateAny(_insertList, new List&lt;string&gt; { &quot;UserName&quot;, &quot;Age&quot; });
//更新指定条件数据
_db.UpdateWhere&lt;Base_UnitTest&gt;(x =&gt; x.UserId == &quot;Admin&quot;, x =&gt;
{
    x.UserId = &quot;Admin2&quot;;
});
//GetList获取表的所有数据
var list=_db.GetList&lt;Base_UnitTest&gt;();
//GetIQPagination获取分页后的数据
var list=_db.GetIShardingQueryable&lt;Base_UnitTest&gt;().GetPagination(pagination);
//Max
var max=_db.GetIShardingQueryable&lt;Base_UnitTest&gt;().Max(x =&gt; x.Age);
//Min
var min=_db.GetIShardingQueryable&lt;Base_UnitTest&gt;().Min(x =&gt; x.Age);
//Average
var min=_db.GetIShardingQueryable&lt;Base_UnitTest&gt;().Average(x =&gt; x.Age);
//Count
var min=_db.GetIShardingQueryable&lt;Base_UnitTest&gt;().Count();
//事务,使用方式与普通事务一致
bool succcess = _db.RunTransaction(() =&gt;
{
    _db.Insert(_newData);
    var newData2 = _newData.DeepClone();
    _db.Insert(newData2);
}).Success;
Assert.AreEqual(succcess, false);
</code></pre>
<p>上述操作中表面上是操作Base_UnitTest表，实际上却在按照一定规则使用Base_UnitTest_0~2三张表，使分片对业务<strong>操作透明</strong>，极大提高开发效率<br>
具体使用方式请参考单元测试源码：<a href="https://github.com/Coldairarrow/EFCore.Sharding/tree/master/src/EFCore.Sharding.Tests/Sharding">连接</a></p>
<h2 id="按时间自动分表">按时间自动分表</h2>
<p>上面的哈希取模的方式虽然简单,但是却十分不实用,因为当3张分表到达瓶颈时,将会面临扩容的问题，这种方式扩容需要进行大量的数据迁移，这无疑是十分麻烦的。因此需要一种方式能够系统自动建表扩容，并且无需人工干预，这就是按时间自动分表.</p>
<pre><code class="language-c#">
using Demo.Common;
using EFCore.Sharding;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Demo.AutoExpandByDate
{
    class Base_UnitTestShardingRule : AbsShardingRule&lt;Base_UnitTest&gt;
    {
        public override DateTime BuildDate(Base_UnitTest obj)
        {
            return obj.CreateTime;
        }
    }

    class Program
    {
        /// &lt;summary&gt;
        /// 表都在同一个数据库中
        /// &lt;/summary&gt;
        public static void OneGroup()
        {
            DateTime startTime = DateTime.Now.AddMinutes(-5);
            DateTime endTime = DateTime.MaxValue;

            //配置初始化
            ShardingConfig.Init(config =&gt;
            {
                config.AddAbsDb(DatabaseType.SqlServer)//添加抽象数据库
                    .AddPhysicDbGroup()//添加物理数据库组
                    .AddPhysicDb(ReadWriteType.Read | ReadWriteType.Write, Config.ConString1)//添加物理数据库1
                    .SetShardingRule(new Base_UnitTestShardingRule())//设置分表规则
                    .AutoExpandByDate&lt;Base_UnitTest&gt;(//设置为按时间自动分表
                        ExpandByDateMode.PerMinute,
                        (startTime, endTime, ShardingConfig.DefaultDbGourpName)
                        );
            });
            var db = DbFactory.GetShardingRepository();
            while (true)
            {
                db.Insert(new Base_UnitTest
                {
                    Id = Guid.NewGuid().ToString(),
                    Age = 1,
                    UserName = Guid.NewGuid().ToString(),
                    CreateTime = DateTime.Now
                });

                var count = db.GetIShardingQueryable&lt;Base_UnitTest&gt;().Count();
                Console.WriteLine($&quot;当前数据量:{count}&quot;);

                Thread.Sleep(50);
            }
        }

        /// &lt;summary&gt;
        /// 表分布在两个数据库测试
        /// &lt;/summary&gt;
        public static void TwoGroup()
        {
            DateTime startTime1 = DateTime.Now.AddMinutes(-5);
            DateTime endTime1 = DateTime.Now.AddMinutes(5);
            DateTime startTime2 = endTime1;
            DateTime endTime2 = DateTime.MaxValue;

            string group1 = &quot;group1&quot;;
            string group2 = &quot;group2&quot;;

            //配置初始化
            ShardingConfig.Init(config =&gt;
            {
                config.AddAbsDb(DatabaseType.SqlServer)//添加抽象数据库
                    .AddPhysicDbGroup(group1)//添加物理数据库组1
                    .AddPhysicDbGroup(group2)//添加物理数据库组2
                    .AddPhysicDb(ReadWriteType.Read | ReadWriteType.Write, Config.ConString1, group1)//添加物理数据库1
                    .AddPhysicDb(ReadWriteType.Read | ReadWriteType.Write, Config.ConString2, group2)//添加物理数据库2
                    .SetShardingRule(new Base_UnitTestShardingRule())//设置分表规则
                    .AutoExpandByDate&lt;Base_UnitTest&gt;(//设置为按时间自动分表
                        ExpandByDateMode.PerMinute,
                        (startTime1, endTime1, group1),
                        (startTime2, endTime2, group2)
                        );
            });

            List&lt;Task&gt; tasks = new List&lt;Task&gt;();
            for (int i = 0; i &lt; 4; i++)
            {
                tasks.Add(Task.Run(() =&gt;
                {
                    var db = DbFactory.GetShardingRepository();
                    while (true)
                    {
                        db.Insert(new Base_UnitTest
                        {
                            Id = Guid.NewGuid().ToString(),
                            Age = 1,
                            UserName = Guid.NewGuid().ToString(),
                            CreateTime = DateTime.Now
                        });

                        var count = db.GetIShardingQueryable&lt;Base_UnitTest&gt;().Count();
                        Console.WriteLine($&quot;当前数据量:{count}&quot;);

                        Thread.Sleep(50);
                    }
                }));
            }

            Console.ReadLine();
        }

        static void Main(string[] args)
        {
            OneGroup();

            Console.ReadLine();
        }
    }
}

</code></pre>
<p>上面Demo都在源码中</p>
<p>上面的代码实现了将Base_UnitTest表按照时间自动分表，每分钟创建一张表，实际使用中根据业务需求设置ExpandByDateMode参数，常用按天、按月分表</p>
<p>自动分表效果<br>
<img src="https://s1.ax1x.com/2020/04/19/JKxE8K.png" alt="JKxE8K.png"><br>
全程无需人工干预，系统会自动定时创建分表，十分简单好用</p>
<h2 id="性能测试">性能测试</h2>
<pre><code class="language-c#">using Demo.Common;
using EFCore.Sharding;
using System;
using System.Diagnostics;
using System.Linq;

namespace Demo.Performance
{
    class Base_UnitTestShardingRule : ModShardingRule&lt;Base_UnitTest&gt;
    {
        protected override string KeyField =&gt; &quot;Id&quot;;
        protected override int Mod =&gt; 3;
    }

    class Program
    {
        static void Main(string[] args)
        {
            ShardingConfig.Init(config =&gt;
            {
                config.AddAbsDb(DatabaseType.SqlServer)
                    .AddPhysicDb(ReadWriteType.Read | ReadWriteType.Write, Config.ConString1)
                    .AddPhysicDbGroup()
                    .AddPhysicTable&lt;Base_UnitTest&gt;(&quot;Base_UnitTest_0&quot;)
                    .AddPhysicTable&lt;Base_UnitTest&gt;(&quot;Base_UnitTest_1&quot;)
                    .AddPhysicTable&lt;Base_UnitTest&gt;(&quot;Base_UnitTest_2&quot;)
                    .SetShardingRule(new Base_UnitTestShardingRule());
            });

            var db = DbFactory.GetRepository(Config.ConString1, DatabaseType.SqlServer);
            Stopwatch watch = new Stopwatch();
            var q = db.GetIQueryable&lt;Base_UnitTest&gt;()
                .Where(x =&gt; x.UserName.Contains(&quot;00001C22-8DD2-4D47-B500-407554B099AB&quot;))
                .OrderByDescending(x =&gt; x.Id)
                .Skip(0)
                .Take(30);

            q.ToList();
            q.ToSharding().ToList();
            watch.Restart();
            var list1 = q.ToList();
            watch.Stop();
            Console.WriteLine($&quot;未分表耗时:{watch.ElapsedMilliseconds}ms&quot;);
            watch.Restart();
            var list2 = q.ToSharding().ToList();
            watch.Stop();
            Console.WriteLine($&quot;分表后耗时:{watch.ElapsedMilliseconds}ms&quot;);

            Console.WriteLine(&quot;完成&quot;);
        }
    }
}
</code></pre>
<p>分表Base_UnitTest_0-2各有100万数据,然后将这三张表的数据导入Base_UnitTest中(即Base_UnitTest表的数据与Base_UnitTest_0-2三张表总合数据一致)</p>
<p>分表与不分表测试结果如下</p>
<p><img src="https://s1.ax1x.com/2020/04/19/JMSJBQ.png" alt="JMSJBQ.png"></p>
<p>这里仅仅分了3张表，其效果立杆见影，若分表几十张，那效果想想就很棒</p>
<h2 id="其它简单操作非sharing">其它简单操作(非Sharing)</h2>
<p>框架不仅支持Sharing,而且封装了常用数据库操作,使用比较简单<br>
详细使用方式参考 <a href="https://github.com/Coldairarrow/EFCore.Sharding/blob/master/examples/Demo.DI/Program.cs">链接</a></p>
<h1 id="总结">总结</h1>
<p>这个简单实用强大的框架希望能够帮助到大家,力求为.NET生态贡献一份力,大家一起壮大.NET生态</p>
<p>欢迎使用本框架，若觉得不错，请比心</p>
<p><img src="https://raw.githubusercontent.com/Coldairarrow/UploadFiles/master/Colder.Fx.Net.AdminLTE/04abaa3d37fa01b4c4058c8163aab6a8.jpg" alt=""></p>
<p>Github欢迎星星:<a href="https://github.com/Coldairarrow">https://github.com/Coldairarrow</a></p>
<p>博客园欢迎点赞：<a href="https://www.cnblogs.com/coldairarrow/">https://www.cnblogs.com/coldairarrow/</a></p>
<p>QQ群3:940069478<br>
个人QQ:862520575（<strong>欢迎技术支持及商务合作，提供.NET Core + Linux + Nginx+ jenkins + git整套持续集成快速开发平台</strong>）</p>
<center> 本人将会对这个快速开发框架不断完善与维护，希望能够帮助到各位<center/>
<center> 若遇到任何问题或需要技术支持，请联系我<center/>
<center> ------学习永无止境，技术永无上限，代码就是艺术------<center/>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2020-04-20 07:53</span>&nbsp;
<a href="https://www.cnblogs.com/coldairarrow/">寒空飞箭</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12733886" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12733886);return false;">收藏</a></div>
	</div>
	
	
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 345024, cb_blogApp = 'coldairarrow', cb_blogUserGuid = 'b1245857-5343-e611-9fc1-ac853d9f53cc';
    var cb_entryId = 12733886, cb_entryCreatedDate = '2020-04-20 07:53', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="calendar"><div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                    <script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 寒空飞箭
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>